[
    {
        "project_name": "Store-API",
        "technology_used": "Python, Flask, VS Code, RestAPI, Insomnia, Swagger",
        "concepts": "RESTful API, Authentication, Email Functionality, Deployment",
        "code_link": "https://github.com/sidd6p/Store-API",
        "star": true,
        "features": {
            "User": [
                "Allows users to register by providing necessary details.",
                "Enables users to log in using their email and password.",
                "Allows users to securely log out of their accounts."
            ],
            "Store": [
                "Enables the creation of a new store to list items and tags.",
                "Allows the deletion of a store along with its listed items and tags."
            ],
            "Item": [
                "Allows the creation of a new item for a specific store.",
                "Enables the modification of item information such as name, description, etc.",
                "Allows the removal of an item along with its associated tag from the store."
            ],
            "Tag": [
                "Enables the creation of a new tag to group items together.",
                "Allows the deletion of a tag from the system."
            ],
            "Link": [
                "Enables the removal of a tag association from a specific item"
            ]
        }
    },
    {
        "project_name": "Deep Learning Utility",
        "technology_used": "Python, Kaggle",
        "concepts": "Neural Network Training, Model Evaluation, Loss Computation, Data Visualization",
        "kaggle_link": "https://www.kaggle.com/code/siddp6/deep-learning-utility",
        "code_link": "https://www.kaggle.com/code/siddp6/deep-learning-utility",
        "star": false,
        "features": {
            "run_epoch": [
                "Runs a single training or validation epoch",
                "Manages model mode (train or eval)",
                "Computes losses and updates weights during training.",
                "Returns the average loss for the epoch."
            ],
            "test_run": [
                "Evaluates a trained model on an evaluation dataset.",
                "Computes losses and tracks correct predictions per class.",
                "Returns evaluation results including average loss, true labels, class-wise correct counts, and total counts."
            ],
            "train": [
                "Trains a neural network model for specified epochs.",
                "Iterates through epochs, trains on training data, and calculates training losses.",
                "Computes validation losses if provided.",
                "Returns lists of training and validation losses."
            ],
            "plot_loss": [
                "Generates a plot showing training losses.",
                "Generates a plot showing validation losses."
            ]
        }
    },
    {
        "project_name": "Shell AI Waste to Energy Hackathon 2023",
        "technology_used": "Python, ARIMA, Algorithms, Kaggle",
        "code_link": "https://www.kaggle.com/code/siddp6/shell-ai-waste-to-energy/notebook",
        "concepts": "Biomass Harvest Forecasting, Optimal Path Selection, ARIMA Modeling, Algorithm Design",
        "star": true,
        "features": {
            "Participant": [
                "Ranking: 19",
                "Challenge: Forecasting biomass harvest and optimizing routes",
                "Techniques: ARIMA model, Algorithm design",
                "Duration: Over 35 days, 50+ iterations"
            ]
        }
    },
    {
        "project_name": "AVAT (Audio Video Analysis Tool)",
        "technology_used": "Python, Plotly Open Source Graphing Library, OpenCV, PyAudio",
        "concepts": "Semantic Object Segregation, Real-time Video and Audio Analysis, Sentiment Analysis, Machine Learning",
        "code_link": "https://github.com/sidd6p/Audio-Video-Analysis-Tool",
        "star": true,
        "features": {
            "Video Analysis": [
                "Utilized the FER library for facial expression recognition",
                "Implemented a CNN-based PyTorch model"
            ],
            "Audio Analysis": [
                "Employed Flair, a Bi-LSTM model",
                "Used text2emotion for audio sentiment analysis"
            ]
        }
    },
    {
        "project_name": "Image-Classification-Template",
        "code_link": "https://github.com/sidd6p/AWS-Image-Classification",
        "technology_used": "Python (Programming Language), Deep Learning, AWS SageMaker, PyTorch",
        "concepts": "Image Classification, Neural Network, Hyperparameters Tuning",
        "star": true,
        "features": {
            "Command Line Utility": [
                "Path to the directory containing the training data.",
                "NN architecture to be used for image classification.",
                "Learning rate for the neural network training.",
                "Number of hidden units in the neural network.",
                "Number of training epochs for the neural network.",
                "Flag to enable or disable GPU usage for training.",
                "Path to the directory for saving training checkpoints."
            ],
            "Jupyter Notebook": []
        }
    }
]
