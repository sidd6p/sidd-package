[
    {
        "project_name": "Store-API",
        "Skills": "Python, Flask, VS Code, RestAPI, Insomnia, Swagger",
        "concepts": "RESTful API, Authentication, Email Functionality, Deployment",
        "code_link": "https://github.com/sidd6p/Store-API",
        "star": true,
        "features": {
            "User": [
                "Allows users to register by providing necessary details.",
                "Enables users to log in using their email and password.",
                "Allows users to securely log out of their accounts."
            ],
            "Store": [
                "Enables the creation of a new store to list items and tags.",
                "Allows the deletion of a store along with its listed items and tags."
            ],
            "Item": [
                "Allows the creation of a new item for a specific store.",
                "Enables the modification of item information such as name, description, etc.",
                "Allows the removal of an item along with its associated tag from the store."
            ],
            "Tag": [
                "Enables the creation of a new tag to group items together.",
                "Allows the deletion of a tag from the system."
            ],
            "Link": [
                "Enables the removal of a tag association from a specific item"
            ]
        }
    },
    {
        "project_name": "Deep Learning Utility",
        "Skills": "Python, Kaggle",
        "concepts": "Neural Network Training, Model Evaluation, Loss Computation, Data Visualization",
        "kaggle_link": "https://www.kaggle.com/code/siddp6/deep-learning-utility",
        "code_link": "https://www.kaggle.com/code/siddp6/deep-learning-utility",
        "star": false,
        "features": {
            "run_epoch": [
                "Runs a single training or validation epoch",
                "Manages model mode (train or eval)",
                "Computes losses and updates weights during training.",
                "Returns the average loss for the epoch."
            ],
            "test_run": [
                "Evaluates a trained model on an evaluation dataset.",
                "Computes losses and tracks correct predictions per class.",
                "Returns evaluation results including average loss, true labels, class-wise correct counts, and total counts."
            ],
            "train": [
                "Trains a neural network model for specified epochs.",
                "Iterates through epochs, trains on training data, and calculates training losses.",
                "Computes validation losses if provided.",
                "Returns lists of training and validation losses."
            ],
            "plot_loss": [
                "Generates a plot showing training losses.",
                "Generates a plot showing validation losses."
            ]
        }
    },
    {
        "project_name": "Shell AI Waste to Energy Hackathon 2023",
        "Skills": "Python, ARIMA, Algorithms, Kaggle",
        "code_link": "https://www.kaggle.com/code/siddp6/shell-ai-waste-to-energy/notebook",
        "concepts": "Biomass Harvest Forecasting, Optimal Path Selection, ARIMA Modeling, Algorithm Design",
        "star": true,
        "features": {
            "Participant": [
                "Ranking: 19",
                "Challenge: Forecasting biomass harvest and optimizing routes",
                "Techniques: ARIMA model, Algorithm design",
                "Duration: Over 35 days, 50+ iterations"
            ]
        }
    },
    {
        "project_name": "AVAT (Audio Video Analysis Tool)",
        "Skills": "Python, Plotly Open Source Graphing Library, OpenCV, PyAudio",
        "concepts": "Semantic Object Segregation, Real-time Video and Audio Analysis, Sentiment Analysis, Machine Learning",
        "code_link": "https://github.com/sidd6p/Audio-Video-Analysis-Tool",
        "star": true,
        "features": {
            "Video Analysis": [
                "Utilized the FER library for facial expression recognition",
                "Implemented a CNN-based PyTorch model"
            ],
            "Audio Analysis": [
                "Employed Flair, a Bi-LSTM model",
                "Used text2emotion for audio sentiment analysis"
            ]
        }
    },
    {
        "project_name": "Image-Classification-Template",
        "code_link": "https://github.com/sidd6p/AWS-Image-Classification",
        "Skills": "Python (Programming Language), Deep Learning, AWS SageMaker, PyTorch",
        "concepts": "Image Classification, Neural Network, Hyperparameters Tuning, Command Line Interface, Jupyter Notebook",
        "star": false,
        "features": {
            "Command Line Utility": [
                "Path to the directory containing the training data.",
                "NN architecture to be used for image classification.",
                "Learning rate for the neural network training.",
                "Number of hidden units in the neural network.",
                "Number of training epochs for the neural network.",
                "Flag to enable or disable GPU usage for training.",
                "Path to the directory for saving training checkpoints.",
                "Supports multiple neural network architectures: vgg16, vgg13, alexnet, and densenet.",
                "Provides an option to save checkpoints during training for model recovery."
            ],
            "Jupyter Notebook": [
                "Run the entire project workflow in a Jupyter notebook for interactive usage.",
                "Supports dataset organization and model training with easy-to-follow commands.",
                "Provides an interactive environment for visualizing training progress, loss, and accuracy."
            ]
        }
    },    
    {
        "project_name": "Deploy and Monitor a Machine Learning Workflow for Image Classification",
        "Skills": "AWS, Python, S3, SageMaker, Lambda, Step Function, boto3",
        "concepts": "Data Staging, Model Training, Deployment, Prediction, Testing and Evaluation",
        "code_link": "https://github.com/sidd6p/Build-a-ML-Workflow-On-Amazon-SageMaker",
        "star": true,
        "features": {
            "Data Staging": [
                "Extracts data from a hosting service and transforms it into usable format.",
                "Saves data locally and loads it into production systems."
            ],
            "Explore the Data": [
                "Filters objects to find label numbers for Bicycle and Motorcycles.",
                "Converts objects into a DataFrame."
            ],
            "Model Training": [
                "Creates metadata for image classification on SageMaker.",
                "Uploads metadata to S3, adds hyperparameters, and trains the model."
            ],
            "Deployment": [
                "Creates data capture, deploys model endpoint, and instantiates a predictor."
            ],
            "Lambda Functions": [
                "Lambda 1: Serializes target data from S3.",
                "Lambda 2: Classifies image.",
                "Lambda 3: Checks confidence threshold."
            ],
            "Testing and Evaluation": [
                "Generates test cases, pulls JSONLines data from inferences, and plots results."
            ]
        }
    },
    {
        "project_name": "Log Ingestor and Query Interface",
        "Skills": "Python, FastAPI, RabbitMQ, PostgreSQL, Elasticsearch",
        "concepts": "Log Ingestion, Querying, Full-Text Search, Filtering, Asynchronous Processing, Scalable Architecture",
        "code_link": "https://github.com/sidd6p/Log-Ingestor-and-Query-Interface",
        "star": true,
        "features": {
            "Log Ingestor": [
                "Ingests log data and stores it in PostgreSQL and indexes it in Elasticsearch for efficient querying.",
                "Uses RabbitMQ for message queuing to ensure reliable, asynchronous processing of logs.",
                "Supports high throughput ingestion, making it suitable for large-scale systems.",
                "Efficient HTTP-based log ingestion with support for batch processing."
            ],
            "Query Interface": [
                "Provides a powerful querying interface for searching and filtering ingested logs.",
                "Supports full-text search capabilities powered by Elasticsearch for fast and accurate search results.",
                "Allows users to filter logs based on time range, log level, and other metadata.",
                "Provides an intuitive interface for navigating large volumes of log data."
            ]
        }
    }
    ,
    {
        "project_name": "E-Commerce Platform",
        "Skills": "Microsoft Azure, Flask, Python, Git, SQLite, HTML, SQL, Azure Blob Storage, Azure SQL Server, Microservices",
        "concepts": "E-Commerce Development, Cloud Deployment, Real-time Order Status, Microservices Architecture, High Availability",
        "code_link": "https://github.com/sidd6p/Fully-Function-E-commerce",
        "star": false,
        "features": {
            "Buyer": [
                "Allows users to register, login, and view product listings.",
                "Enables buyers to add products to cart or wishlist.",
                "Allows bulk ordering of items from the cart or wishlist.",
                "Provides the option to cancel or confirm orders.",
                "Displays order history and updates status of orders (Accepted, Out for Delivery, Cancelled).",
                "Shows product details and allows users to search for products."
            ],
            "Seller": [
                "Enables sellers to register, login, and upload products.",
                "Allows sellers to update product details and availability.",
                "Enables sellers to manage orders and update order status.",
                "Allows the addition of a seller shop image/logo and product images.",
                "Shows a list of buyers and their orders for each seller."
            ],
            "General": [
                "Supports real-time order tracking for both buyers and sellers.",
                "Uses Azure services such as Azure SQL Server for database management and Azure Blob Storage for image storage.",
                "Provides high availability using separate virtual machines (VMs) for buyers and sellers, ensuring operational continuity even if one server goes down."
            ]
        }
    },    
    {
        "project_name": "Project X",
        "Skills": "Python, FastAPI, SQLite, MySQL, Git, Flask, HTML, GitHub, SQL",
        "concepts": "Cloud Storage, FastAPI, User Authentication, File Management",
        "code_link": "https://github.com/sidd6p/Project-X",
        "star": false,
        "features": {
            "User": [
                "Allows users to register and log in securely.",
                "Provides access control for file storage (currently, only the owner can view the files)."
            ],
            "File Storage": [
                "Enables file upload and download functionalities.",
                "Stores files on a server with a web-based client application."
            ],
            "General": [
                "Web-based client application to interact with the file storage service.",
                "Documentation available at /docs for easy interaction and API testing."
            ]
        }
    },    
    {
        "project_name": "Cab Sharing Web App",
        "duration": "Oct 2021 - Nov 2021",
        "star": false,
        "code_link": "https://github.com/sidd6p/CO-Ride",
        "description": "A traditional cab-sharing web app, developed as part of Vellore Institute of Technology projects.",
        "features": [
            "User privacy features to hide information until both parties agree to share the ride",
            "No third-party involvement like Ola or Uber, enabling passengers to share the fare equally",
            "Cab-sharing history, user verification, and rating available on the account page",
            "Ongoing development for additional features"
        ],
        "Skills": "Flask, Linux, GitHub, Python, Git, SQLite, HTML, MySQL",
        "concepts": "Ride-sharing, User Privacy, Web Application, Self-service Platform"
    }
]
